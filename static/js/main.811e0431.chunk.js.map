{"version":3,"sources":["Components /Card.js","Components /CardList.js","Components /SearchBox.js","Components /Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","cardArray","robots","map","user","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACrB,OACI,sBAAKC,UAAY,sDAAjB,UACI,qBAAKC,IAAK,SAASC,IAAG,+BAA2BL,EAA3B,eACtB,gCACI,6BAAKC,IACL,4BAAIC,WCiBLI,EAtBE,SAAC,GAAc,IAKtBC,EALqB,EAAZC,OAKUC,KAAK,SAAAC,GAC1B,OACI,cAAC,EAAD,CAEIV,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,OAHPQ,EAAKV,OAOtB,OACI,8BACKO,KCLEI,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YC6CJC,E,kDAzCX,aAAc,IAAD,8BACT,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdzC,EAAKC,MAAQ,CACTtB,OAAQ,GACRI,YAAa,IAJR,E,qDAQb,WAAqB,IAAD,OAChBmB,MAAM,4CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACnB,OAAQ2B,S,oBAU1C,WAAU,IAAD,EAC2BC,KAAKN,MAA7BtB,EADH,EACGA,OAAQI,EADX,EACWA,YACVyB,EAAiB7B,EAAO8B,QAAO,SAAAC,GACjC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS7B,EAAY4B,kBAEzD,OACI,sBAAKrC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAeuB,KAAKX,iBAC/B,cAAC,EAAD,UAEQ,cAAC,EAAD,CAAUjB,OAAQ6B,a,GAjCxBK,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.811e0431.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email }) => {\n    return (\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt ='robots' src ={`https://robohash.org/${id}}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    //// ERROR BOUNDRY IN USE \n    // if (true) {\n    //     throw new Error(\"NOOOOOOOOO!\");\n    // }\n    const cardArray = robots.map( user => {\n        return (\n            <Card \n                key={user.id} \n                id={user.id} \n                name={user.name} \n                email={user.email} \n            />\n        )\n    })\n    return (\n        <div>\n            {cardArray}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" \n                placeholder=\"search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\nimport CardList from '../Components /CardList';\n// import {robots} from './robots'; no needed after fetching user data\nimport SearchBox from '../Components /SearchBox';\nimport Scroll from '../Components /Scroll';\n// import ErrorBoundry from '../Components /ErrorBoundry'  \n\n\nclass App extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https:jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n    }\n\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n\n    }\n\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        return (\n            <div className=\"tc\">\n                <h1 className='f1'>Robofriends</h1>\n                <SearchBox searchChange ={this.onSearchChange}/>\n                <Scroll>\n                    {/* <ErrorBoundry> */}\n                        <CardList robots={filteredRobots}/>\n                    {/* </ErrorBoundry> */}\n                </Scroll>\n            </div>\n        )\n        \n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport './Containers/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}